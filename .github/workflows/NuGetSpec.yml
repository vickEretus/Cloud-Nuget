name: .NET

on:
  push:
  pull_request:
  workflow_dispatch:
    inputs:
        nuget:
          type: boolean
          description: 'Publish Client NuGet Package'
          required: true
          default: false

jobs:
  build:
    runs-on: self-hosted
    if: github.ref != 'refs/heads/hosted-autogenerated'
    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.0.x
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --no-restore
    - name: Upload build artifacts
      uses: actions/upload-artifact@v2
      with:
        name: build-artifacts
        path: ./Server/bin/Debug/net7.0/
    - name: Test
      run: dotnet test --no-build --verbosity normal

  publish-nuget:
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.nuget
    steps:
      - uses: actions/checkout@v3
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 7.0.x
      - name: Auto-increment version
        run: |
          # Define the path to your .csproj files
          client_csproj_file="./Client/Client.csproj"
          common_csproj_file="./Common/Common.csproj"
          
          # Get the current version from the .csproj files
          client_current_version=$(grep -oPm1 "(?<=<Version>)[^<]+" "$client_csproj_file")
          common_current_version=$(grep -oPm1 "(?<=<Version>)[^<]+" "$common_csproj_file")
          
          #Ensure client version exists
          if [ -z "$client_current_version" ]; then
            echo "Error: Current client version not found in $client_csproj_file"
            exit 1
          fi
          
          #Ensure common version exists
          if [ -z "$common_current_version" ]; then
            echo "Error: Current common version not found in $common_csproj_file"
            exit 1
          fi
          
          #Ensure client and common versions are identical
          if [[ "$common_current_version" != "$client_current_version" ]]; then
            echo "Error: Client and Common versions are not the same"
            echo "Error: Client version: $client_current_version"
            echo "Error: Common version: $common_current_version"
            exit 1
          fi
          
          # Increment the versions as needed (e.g., patch version)
          IFS='.' read -r -a version_parts <<< "$client_current_version"
          new_patch=$((version_parts[2] + 1))
          new_version="${version_parts[0]}.${version_parts[1]}.$new_patch"
          
          # Update the .csproj files with the new version
          sed -i "s/<Version>$client_current_version<\/Version>/<Version>$new_version<\/Version>/" "$client_csproj_file"
          sed -i "s/<Version>$common_current_version<\/Version>/<Version>$new_version<\/Version>/" "$common_csproj_file"
        shell: bash
      - name: Configure Git
        run: |
          git config user.email "github-actions@github.com"
          git config user.name "GitHub Actions"
      - name: Commit and push changes
        run: |
          git add ./Client/Client.csproj
          git add ./Common/Common.csproj
          git commit -m "Update Client and Common version: automated"
          git push origin ${{ github.ref }} || echo "No changes to commit"
      - name: Generate NuGet
        run:  dotnet pack -p:IncludeReferencedProjects=true -c Release -o C:/clientpackage
      - name: Upload NuGet artifacts
        uses: actions/upload-artifact@v2
        with:
          name: pack-artifacts
          path: C:/clientpackage
      - name: Publish NuGet Package
        run: dotnet nuget push C:/clientpackage/*.nupkg --api-key ${{ secrets.PACKAGES_PERSONAL_TOKEN }} -s https://nuget.pkg.github.com/YCP-Rev-Metrix/index.json --no-symbols
